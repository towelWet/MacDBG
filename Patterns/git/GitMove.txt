# Git File Moving Guide

üîÑ Complete Guide to Moving Files in Git

## Method 1: Using git mv (Recommended)

### Basic File Move
```bash
git mv old_file.txt new_file.txt
git commit -m "Rename file"
git push origin main
```
‚úÖ **Best Practice**: Preserves file history and Git tracks the move automatically.

### Move File to Different Directory
```bash
git mv file.txt folder/file.txt
git commit -m "Move file to folder"
git push origin main
```
üìÅ Creates directory if it doesn't exist.

### Move and Rename Simultaneously
```bash
git mv old_name.txt new_folder/new_name.txt
git commit -m "Move and rename file"
git push origin main
```
üéØ Combines location change and renaming in one operation.

## Method 2: Manual Move + Git Commands

### Step-by-Step Manual Process
```bash
# 1. Move the file manually
mv old_file.txt new_location/new_file.txt

# 2. Remove old file from Git tracking
git rm old_file.txt

# 3. Add new file location
git add new_location/new_file.txt

# 4. Commit changes
git commit -m "Move file to new location"

# 5. Push to remote
git push origin main
```
‚ö†Ô∏è **Note**: May not preserve file history as cleanly as `git mv`.

## Bulk Operations

### Move Multiple Files to Folder
```bash
# Create destination folder
mkdir new_folder

# Move multiple files
git mv file1.txt file2.txt file3.txt new_folder/

# Commit all moves
git commit -m "Move files to new_folder"
git push origin main
```

### Move All Files with Pattern
```bash
# Move all .txt files to docs folder
mkdir docs
git mv *.txt docs/
git commit -m "Move all txt files to docs"
git push origin main
```

### Reorganize Directory Structure
```bash
# Create new structure
mkdir -p src/{components,utils,styles}

# Move files to appropriate folders
git mv Component1.js Component2.js src/components/
git mv helper.js utils.js src/utils/
git mv style.css main.css src/styles/

git commit -m "Reorganize project structure"
git push origin main
```

## Advanced Scenarios

### Move Files Between Branches
```bash
# Switch to target branch
git checkout target-branch

# Move files
git mv file.txt new_location/
git commit -m "Move file in target branch"

# Switch back to main
git checkout main

# Merge changes
git merge target-branch
git push origin main
```

### Undo a File Move
```bash
# If not yet committed
git mv new_location/file.txt original_location/file.txt

# If already committed (reset last commit)
git reset --soft HEAD~1
git mv new_location/file.txt original_location/file.txt
git commit -m "Revert file move"
```

## Best Practices

‚úÖ **DO:**
- Use `git mv` for better history tracking
- Commit moves separately from content changes
- Use descriptive commit messages
- Test moves in feature branches first

‚ùå **DON'T:**
- Move files outside of Git (breaks history)
- Combine moves with major content changes
- Forget to push after committing moves
- Move files that are currently being edited by others

## Troubleshooting

### File Move Conflicts
```bash
# If move conflicts with other changes
git status
git add .
git commit -m "Resolve move conflicts"
```

### Verify Move Success
```bash
# Check file history is preserved
git log --follow new_location/file.txt

# Verify file is in new location
ls new_location/
```

üéØ **Remember**: `git mv` is essentially `mv` + `git rm` + `git add` in one command, but with better history preservation!